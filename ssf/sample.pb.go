// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: ssf/sample.proto

package ssf

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SSFSample_Metric int32

const (
	SSFSample_COUNTER   SSFSample_Metric = 0
	SSFSample_GAUGE     SSFSample_Metric = 1
	SSFSample_HISTOGRAM SSFSample_Metric = 2
	SSFSample_SET       SSFSample_Metric = 3
	SSFSample_STATUS    SSFSample_Metric = 4
)

// Enum value maps for SSFSample_Metric.
var (
	SSFSample_Metric_name = map[int32]string{
		0: "COUNTER",
		1: "GAUGE",
		2: "HISTOGRAM",
		3: "SET",
		4: "STATUS",
	}
	SSFSample_Metric_value = map[string]int32{
		"COUNTER":   0,
		"GAUGE":     1,
		"HISTOGRAM": 2,
		"SET":       3,
		"STATUS":    4,
	}
)

func (x SSFSample_Metric) Enum() *SSFSample_Metric {
	p := new(SSFSample_Metric)
	*p = x
	return p
}

func (x SSFSample_Metric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSFSample_Metric) Descriptor() protoreflect.EnumDescriptor {
	return file_ssf_sample_proto_enumTypes[0].Descriptor()
}

func (SSFSample_Metric) Type() protoreflect.EnumType {
	return &file_ssf_sample_proto_enumTypes[0]
}

func (x SSFSample_Metric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSFSample_Metric.Descriptor instead.
func (SSFSample_Metric) EnumDescriptor() ([]byte, []int) {
	return file_ssf_sample_proto_rawDescGZIP(), []int{0, 0}
}

type SSFSample_Status int32

const (
	SSFSample_OK       SSFSample_Status = 0
	SSFSample_WARNING  SSFSample_Status = 1
	SSFSample_CRITICAL SSFSample_Status = 2
	SSFSample_UNKNOWN  SSFSample_Status = 3
)

// Enum value maps for SSFSample_Status.
var (
	SSFSample_Status_name = map[int32]string{
		0: "OK",
		1: "WARNING",
		2: "CRITICAL",
		3: "UNKNOWN",
	}
	SSFSample_Status_value = map[string]int32{
		"OK":       0,
		"WARNING":  1,
		"CRITICAL": 2,
		"UNKNOWN":  3,
	}
)

func (x SSFSample_Status) Enum() *SSFSample_Status {
	p := new(SSFSample_Status)
	*p = x
	return p
}

func (x SSFSample_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSFSample_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_ssf_sample_proto_enumTypes[1].Descriptor()
}

func (SSFSample_Status) Type() protoreflect.EnumType {
	return &file_ssf_sample_proto_enumTypes[1]
}

func (x SSFSample_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSFSample_Status.Descriptor instead.
func (SSFSample_Status) EnumDescriptor() ([]byte, []int) {
	return file_ssf_sample_proto_rawDescGZIP(), []int{0, 1}
}

type SSFSample_Scope int32

const (
	SSFSample_DEFAULT SSFSample_Scope = 0
	SSFSample_LOCAL   SSFSample_Scope = 1
	SSFSample_GLOBAL  SSFSample_Scope = 2
)

// Enum value maps for SSFSample_Scope.
var (
	SSFSample_Scope_name = map[int32]string{
		0: "DEFAULT",
		1: "LOCAL",
		2: "GLOBAL",
	}
	SSFSample_Scope_value = map[string]int32{
		"DEFAULT": 0,
		"LOCAL":   1,
		"GLOBAL":  2,
	}
)

func (x SSFSample_Scope) Enum() *SSFSample_Scope {
	p := new(SSFSample_Scope)
	*p = x
	return p
}

func (x SSFSample_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSFSample_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_ssf_sample_proto_enumTypes[2].Descriptor()
}

func (SSFSample_Scope) Type() protoreflect.EnumType {
	return &file_ssf_sample_proto_enumTypes[2]
}

func (x SSFSample_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSFSample_Scope.Descriptor instead.
func (SSFSample_Scope) EnumDescriptor() ([]byte, []int) {
	return file_ssf_sample_proto_rawDescGZIP(), []int{0, 2}
}

// SSFSample is similar of a StatsD-style, point in time metric. It has a Metric
// type, a name, a value and a timestamp. Additionally it can contain a message,
// a status, a sample rate, a map of tags as string keys and values and a unit
// type. Note that SSF doesn't understand units, they are just strings!
type SSFSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The underlying type of the metric
	Metric SSFSample_Metric `protobuf:"varint,1,opt,name=metric,proto3,enum=ssf.SSFSample_Metric" json:"metric,omitempty"`
	// no spaces, but . is allowed
	// e.g.: veneur.bar.baz
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value      float32           `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp  int64             `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Message    string            `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Status     SSFSample_Status  `protobuf:"varint,6,opt,name=status,proto3,enum=ssf.SSFSample_Status" json:"status,omitempty"`
	SampleRate float32           `protobuf:"fixed32,7,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	Tags       map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Unit       string            `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`
	// scope indicates to an SSF endpoint what it should do with a metric:
	//
	//     - DEFAULT (or absent) - aggregate counters and gauges locally,
	//       handle histograms and sets globally.
	//     - LOCAL - aggregate all metrics locally.
	//     - GLOBAL - aggregate all metrics globally.
	//
	Scope SSFSample_Scope `protobuf:"varint,10,opt,name=scope,proto3,enum=ssf.SSFSample_Scope" json:"scope,omitempty"`
}

func (x *SSFSample) Reset() {
	*x = SSFSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssf_sample_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSFSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSFSample) ProtoMessage() {}

func (x *SSFSample) ProtoReflect() protoreflect.Message {
	mi := &file_ssf_sample_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSFSample.ProtoReflect.Descriptor instead.
func (*SSFSample) Descriptor() ([]byte, []int) {
	return file_ssf_sample_proto_rawDescGZIP(), []int{0}
}

func (x *SSFSample) GetMetric() SSFSample_Metric {
	if x != nil {
		return x.Metric
	}
	return SSFSample_COUNTER
}

func (x *SSFSample) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SSFSample) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SSFSample) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SSFSample) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SSFSample) GetStatus() SSFSample_Status {
	if x != nil {
		return x.Status
	}
	return SSFSample_OK
}

func (x *SSFSample) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *SSFSample) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SSFSample) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *SSFSample) GetScope() SSFSample_Scope {
	if x != nil {
		return x.Scope
	}
	return SSFSample_DEFAULT
}

// SSFSpan is the primary unit of reporting in SSF. It embeds a set of
// SSFSamples, as well as start/stop time stamps and a parent ID
// (which allows assembling a span lineage for distributed tracing
// purposes).
//
// Note that since this is protobuf, an SSFSpan does not *have* to
// include metrics, just as it does not *have* to include information
// necessary to reconstruct a trace.
//
// Compatibility
//
// On ingestion, an SSFSpan with an empty string for a name field but
// a tag "name" will have that name field replaced with the name tag,
// and the tag is removed.
//
// Metric SSFSamples with a zero sample_rate (indicating it was left
// out) have the sample_rate field set to 1 on ingestion.
//
// Validity Criteria
//
// Programs consuming SSFSpans should take care to only process spans
// and metrics that fulfill the following criteria:
//
// Metrics are considered valid if they have a name and a value.
//
// SSFSpans are considered valid trace spans if they have non-zero id,
// trace_id, start_timestamp and end_timestamp fields.
type SSFSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// the trace_id is the (span) id of the root span
	TraceId int64 `protobuf:"varint,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// the id for this span
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// the (span) id of the direct parent, if this span is not a root
	// span
	ParentId       int64 `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	StartTimestamp int64 `protobuf:"varint,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   int64 `protobuf:"varint,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// This flag being true signals that this span was an error. That definition
	// of error is not implicitly fatal, as a span may error but be fixed by
	// a subsequent retry, etc.
	Error bool `protobuf:"varint,7,opt,name=error,proto3" json:"error,omitempty"`
	// The name of the service
	// e.g. "veneur"
	Service string       `protobuf:"bytes,8,opt,name=service,proto3" json:"service,omitempty"`
	Metrics []*SSFSample `protobuf:"bytes,10,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Tags are name value pairs that describe a facet of the span. They apply to
	// the *entire* span as opposed to logs which apply to a specific time in
	// the span.
	Tags map[string]string `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An indicator span is one that represents an action that is included in a
	// service's Service Level Indicators (https://en.wikipedia.org/wiki/Service_level_indicator)
	// This is a signal to receivers that this span may be used to compute SLIs.
	// In practice a service's core feature — the thing you would "bill" for, such
	// as an API call or read/write operation — would be flagged as an indicator
	// span, and its child spans would further describe its duration.
	// It's also worth nothing that an indicator need not be the "root" or first
	// span in a trace. You might have various forms of middleware that happen
	// first or you might have multiple services participating in the same trace.
	Indicator bool `protobuf:"varint,12,opt,name=indicator,proto3" json:"indicator,omitempty"`
	// What to call this span. This could take the form of the endpoint
	// (/customer/:id), the function (class::name.method), a friendly name
	// (foo middleware) or whatever makes sense in your context.
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Root trace start time. This may be different than the span starting time.
	// This is especially useful for communicating with AWS X-Ray and have a consistent
	// TraceID.
	RootStartTimestamp int64 `protobuf:"varint,14,opt,name=root_start_timestamp,json=rootStartTimestamp,proto3" json:"root_start_timestamp,omitempty"`
}

func (x *SSFSpan) Reset() {
	*x = SSFSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssf_sample_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSFSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSFSpan) ProtoMessage() {}

func (x *SSFSpan) ProtoReflect() protoreflect.Message {
	mi := &file_ssf_sample_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSFSpan.ProtoReflect.Descriptor instead.
func (*SSFSpan) Descriptor() ([]byte, []int) {
	return file_ssf_sample_proto_rawDescGZIP(), []int{1}
}

func (x *SSFSpan) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SSFSpan) GetTraceId() int64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

func (x *SSFSpan) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SSFSpan) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *SSFSpan) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *SSFSpan) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *SSFSpan) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SSFSpan) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *SSFSpan) GetMetrics() []*SSFSample {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *SSFSpan) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SSFSpan) GetIndicator() bool {
	if x != nil {
		return x.Indicator
	}
	return false
}

func (x *SSFSpan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SSFSpan) GetRootStartTimestamp() int64 {
	if x != nil {
		return x.RootStartTimestamp
	}
	return 0
}

var File_ssf_sample_proto protoreflect.FileDescriptor

var file_ssf_sample_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x73, 0x66, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x73, 0x73, 0x66, 0x22, 0xc0, 0x04, 0x0a, 0x09, 0x53, 0x53, 0x46, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x73, 0x66, 0x2e, 0x53, 0x53, 0x46, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x73, 0x66, 0x2e, 0x53, 0x53, 0x46,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x73, 0x66, 0x2e, 0x53, 0x53, 0x46, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x73, 0x66, 0x2e, 0x53, 0x53,
	0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a,
	0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x04, 0x22, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0x2b, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xe2, 0x03, 0x0a, 0x07, 0x53,
	0x53, 0x46, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x73, 0x66, 0x2e, 0x53, 0x53,
	0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x73, 0x66, 0x2e, 0x53, 0x53, 0x46, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x6f,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x42,
	0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x2f, 0x76, 0x65, 0x6e, 0x65, 0x75, 0x72, 0x2f, 0x73, 0x73, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ssf_sample_proto_rawDescOnce sync.Once
	file_ssf_sample_proto_rawDescData = file_ssf_sample_proto_rawDesc
)

func file_ssf_sample_proto_rawDescGZIP() []byte {
	file_ssf_sample_proto_rawDescOnce.Do(func() {
		file_ssf_sample_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssf_sample_proto_rawDescData)
	})
	return file_ssf_sample_proto_rawDescData
}

var file_ssf_sample_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ssf_sample_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ssf_sample_proto_goTypes = []interface{}{
	(SSFSample_Metric)(0), // 0: ssf.SSFSample.Metric
	(SSFSample_Status)(0), // 1: ssf.SSFSample.Status
	(SSFSample_Scope)(0),  // 2: ssf.SSFSample.Scope
	(*SSFSample)(nil),     // 3: ssf.SSFSample
	(*SSFSpan)(nil),       // 4: ssf.SSFSpan
	nil,                   // 5: ssf.SSFSample.TagsEntry
	nil,                   // 6: ssf.SSFSpan.TagsEntry
}
var file_ssf_sample_proto_depIdxs = []int32{
	0, // 0: ssf.SSFSample.metric:type_name -> ssf.SSFSample.Metric
	1, // 1: ssf.SSFSample.status:type_name -> ssf.SSFSample.Status
	5, // 2: ssf.SSFSample.tags:type_name -> ssf.SSFSample.TagsEntry
	2, // 3: ssf.SSFSample.scope:type_name -> ssf.SSFSample.Scope
	3, // 4: ssf.SSFSpan.metrics:type_name -> ssf.SSFSample
	6, // 5: ssf.SSFSpan.tags:type_name -> ssf.SSFSpan.TagsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ssf_sample_proto_init() }
func file_ssf_sample_proto_init() {
	if File_ssf_sample_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssf_sample_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSFSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssf_sample_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSFSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssf_sample_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssf_sample_proto_goTypes,
		DependencyIndexes: file_ssf_sample_proto_depIdxs,
		EnumInfos:         file_ssf_sample_proto_enumTypes,
		MessageInfos:      file_ssf_sample_proto_msgTypes,
	}.Build()
	File_ssf_sample_proto = out.File
	file_ssf_sample_proto_rawDesc = nil
	file_ssf_sample_proto_goTypes = nil
	file_ssf_sample_proto_depIdxs = nil
}
