// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: samplers/metricpb/metric.proto

package metricpb

import (
	proto "github.com/golang/protobuf/proto"
	tdigest "github.com/stripe/veneur/tdigest"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Scope describes at which level the metric will be emitted.
type Scope int32

const (
	Scope_Mixed  Scope = 0
	Scope_Local  Scope = 1
	Scope_Global Scope = 2
)

// Enum value maps for Scope.
var (
	Scope_name = map[int32]string{
		0: "Mixed",
		1: "Local",
		2: "Global",
	}
	Scope_value = map[string]int32{
		"Mixed":  0,
		"Local":  1,
		"Global": 2,
	}
)

func (x Scope) Enum() *Scope {
	p := new(Scope)
	*p = x
	return p
}

func (x Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_samplers_metricpb_metric_proto_enumTypes[0].Descriptor()
}

func (Scope) Type() protoreflect.EnumType {
	return &file_samplers_metricpb_metric_proto_enumTypes[0]
}

func (x Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scope.Descriptor instead.
func (Scope) EnumDescriptor() ([]byte, []int) {
	return file_samplers_metricpb_metric_proto_rawDescGZIP(), []int{0}
}

// Type can be any of the valid metric types recognized by Veneur.
type Type int32

const (
	Type_Counter   Type = 0
	Type_Gauge     Type = 1
	Type_Histogram Type = 2
	Type_Set       Type = 3
	Type_Timer     Type = 4
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "Counter",
		1: "Gauge",
		2: "Histogram",
		3: "Set",
		4: "Timer",
	}
	Type_value = map[string]int32{
		"Counter":   0,
		"Gauge":     1,
		"Histogram": 2,
		"Set":       3,
		"Timer":     4,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_samplers_metricpb_metric_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_samplers_metricpb_metric_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_samplers_metricpb_metric_proto_rawDescGZIP(), []int{1}
}

// Metric is a common container for any metric type. Common fields such as
// Name, Tags, and Type are all present for all types, while the value can
// vary.
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Type Type     `protobuf:"varint,3,opt,name=type,proto3,enum=metricpb.Type" json:"type,omitempty"`
	// Types that are assignable to Value:
	//	*Metric_Counter
	//	*Metric_Gauge
	//	*Metric_Histogram
	//	*Metric_Set
	Value isMetric_Value `protobuf_oneof:"value"`
	Scope Scope          `protobuf:"varint,9,opt,name=scope,proto3,enum=metricpb.Scope" json:"scope,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samplers_metricpb_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_samplers_metricpb_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_samplers_metricpb_metric_proto_rawDescGZIP(), []int{0}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Metric) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_Counter
}

func (m *Metric) GetValue() isMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Metric) GetCounter() *CounterValue {
	if x, ok := x.GetValue().(*Metric_Counter); ok {
		return x.Counter
	}
	return nil
}

func (x *Metric) GetGauge() *GaugeValue {
	if x, ok := x.GetValue().(*Metric_Gauge); ok {
		return x.Gauge
	}
	return nil
}

func (x *Metric) GetHistogram() *HistogramValue {
	if x, ok := x.GetValue().(*Metric_Histogram); ok {
		return x.Histogram
	}
	return nil
}

func (x *Metric) GetSet() *SetValue {
	if x, ok := x.GetValue().(*Metric_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Metric) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_Mixed
}

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_Counter struct {
	Counter *CounterValue `protobuf:"bytes,5,opt,name=counter,proto3,oneof"`
}

type Metric_Gauge struct {
	Gauge *GaugeValue `protobuf:"bytes,6,opt,name=gauge,proto3,oneof"`
}

type Metric_Histogram struct {
	Histogram *HistogramValue `protobuf:"bytes,7,opt,name=histogram,proto3,oneof"`
}

type Metric_Set struct {
	Set *SetValue `protobuf:"bytes,8,opt,name=set,proto3,oneof"`
}

func (*Metric_Counter) isMetric_Value() {}

func (*Metric_Gauge) isMetric_Value() {}

func (*Metric_Histogram) isMetric_Value() {}

func (*Metric_Set) isMetric_Value() {}

// CounterValue wraps the value of a counter
type CounterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CounterValue) Reset() {
	*x = CounterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samplers_metricpb_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterValue) ProtoMessage() {}

func (x *CounterValue) ProtoReflect() protoreflect.Message {
	mi := &file_samplers_metricpb_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterValue.ProtoReflect.Descriptor instead.
func (*CounterValue) Descriptor() ([]byte, []int) {
	return file_samplers_metricpb_metric_proto_rawDescGZIP(), []int{1}
}

func (x *CounterValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// GaugeValue wraps the value of a gauge
type GaugeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GaugeValue) Reset() {
	*x = GaugeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samplers_metricpb_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaugeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaugeValue) ProtoMessage() {}

func (x *GaugeValue) ProtoReflect() protoreflect.Message {
	mi := &file_samplers_metricpb_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaugeValue.ProtoReflect.Descriptor instead.
func (*GaugeValue) Descriptor() ([]byte, []int) {
	return file_samplers_metricpb_metric_proto_rawDescGZIP(), []int{2}
}

func (x *GaugeValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// HistogramValue for now just includes the t-digest.  This can be expanded
// to include the other values such as the sum, average, etc.
type HistogramValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TDigest *tdigest.MergingDigestData `protobuf:"bytes,1,opt,name=t_digest,json=tDigest,proto3" json:"t_digest,omitempty"`
}

func (x *HistogramValue) Reset() {
	*x = HistogramValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samplers_metricpb_metric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramValue) ProtoMessage() {}

func (x *HistogramValue) ProtoReflect() protoreflect.Message {
	mi := &file_samplers_metricpb_metric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramValue.ProtoReflect.Descriptor instead.
func (*HistogramValue) Descriptor() ([]byte, []int) {
	return file_samplers_metricpb_metric_proto_rawDescGZIP(), []int{3}
}

func (x *HistogramValue) GetTDigest() *tdigest.MergingDigestData {
	if x != nil {
		return x.TDigest
	}
	return nil
}

// SetValue contains a binary-encoded HyperLogLog
type SetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperLogLog []byte `protobuf:"bytes,1,opt,name=hyper_log_log,json=hyperLogLog,proto3" json:"hyper_log_log,omitempty"`
}

func (x *SetValue) Reset() {
	*x = SetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samplers_metricpb_metric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetValue) ProtoMessage() {}

func (x *SetValue) ProtoReflect() protoreflect.Message {
	mi := &file_samplers_metricpb_metric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetValue.ProtoReflect.Descriptor instead.
func (*SetValue) Descriptor() ([]byte, []int) {
	return file_samplers_metricpb_metric_proto_rawDescGZIP(), []int{4}
}

func (x *SetValue) GetHyperLogLog() []byte {
	if x != nil {
		return x.HyperLogLog
	}
	return nil
}

var File_samplers_metricpb_metric_proto protoreflect.FileDescriptor

var file_samplers_metricpb_metric_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x1a, 0x15, 0x74, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x2f, 0x74, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc8, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x47, 0x61, 0x75, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x5f, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22,
	0x2e, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x67, 0x2a,
	0x29, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x69, 0x78, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x61, 0x75, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x65, 0x74,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x10, 0x04, 0x42, 0x2c, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x2f, 0x76, 0x65, 0x6e, 0x65, 0x75, 0x72, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_samplers_metricpb_metric_proto_rawDescOnce sync.Once
	file_samplers_metricpb_metric_proto_rawDescData = file_samplers_metricpb_metric_proto_rawDesc
)

func file_samplers_metricpb_metric_proto_rawDescGZIP() []byte {
	file_samplers_metricpb_metric_proto_rawDescOnce.Do(func() {
		file_samplers_metricpb_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_samplers_metricpb_metric_proto_rawDescData)
	})
	return file_samplers_metricpb_metric_proto_rawDescData
}

var file_samplers_metricpb_metric_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_samplers_metricpb_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_samplers_metricpb_metric_proto_goTypes = []interface{}{
	(Scope)(0),                        // 0: metricpb.Scope
	(Type)(0),                         // 1: metricpb.Type
	(*Metric)(nil),                    // 2: metricpb.Metric
	(*CounterValue)(nil),              // 3: metricpb.CounterValue
	(*GaugeValue)(nil),                // 4: metricpb.GaugeValue
	(*HistogramValue)(nil),            // 5: metricpb.HistogramValue
	(*SetValue)(nil),                  // 6: metricpb.SetValue
	(*tdigest.MergingDigestData)(nil), // 7: tdigest.MergingDigestData
}
var file_samplers_metricpb_metric_proto_depIdxs = []int32{
	1, // 0: metricpb.Metric.type:type_name -> metricpb.Type
	3, // 1: metricpb.Metric.counter:type_name -> metricpb.CounterValue
	4, // 2: metricpb.Metric.gauge:type_name -> metricpb.GaugeValue
	5, // 3: metricpb.Metric.histogram:type_name -> metricpb.HistogramValue
	6, // 4: metricpb.Metric.set:type_name -> metricpb.SetValue
	0, // 5: metricpb.Metric.scope:type_name -> metricpb.Scope
	7, // 6: metricpb.HistogramValue.t_digest:type_name -> tdigest.MergingDigestData
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_samplers_metricpb_metric_proto_init() }
func file_samplers_metricpb_metric_proto_init() {
	if File_samplers_metricpb_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_samplers_metricpb_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samplers_metricpb_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samplers_metricpb_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaugeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samplers_metricpb_metric_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samplers_metricpb_metric_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_samplers_metricpb_metric_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Metric_Counter)(nil),
		(*Metric_Gauge)(nil),
		(*Metric_Histogram)(nil),
		(*Metric_Set)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_samplers_metricpb_metric_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_samplers_metricpb_metric_proto_goTypes,
		DependencyIndexes: file_samplers_metricpb_metric_proto_depIdxs,
		EnumInfos:         file_samplers_metricpb_metric_proto_enumTypes,
		MessageInfos:      file_samplers_metricpb_metric_proto_msgTypes,
	}.Build()
	File_samplers_metricpb_metric_proto = out.File
	file_samplers_metricpb_metric_proto_rawDesc = nil
	file_samplers_metricpb_metric_proto_goTypes = nil
	file_samplers_metricpb_metric_proto_depIdxs = nil
}
